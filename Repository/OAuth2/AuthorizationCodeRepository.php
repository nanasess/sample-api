<?php

namespace Eccube\Repository\OAuth2;

use Doctrine\ORM\EntityRepository;
use Eccube\Entity\OAuth2\AuthorizationCode;
use OAuth2\Storage\AuthorizationCodeInterface;
use OAuth2\OpenID\Storage\AuthorizationCodeInterface as OpenIDAuthorizationCodeInterface;

/**
 * AuthorizationCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @link http://bshaffer.github.io/oauth2-server-php-docs/cookbook/doctrine2/
 */
class AuthorizationCodeRepository extends EntityRepository implements AuthorizationCodeInterface, OpenIDAuthorizationCodeInterface
{
    public function getAuthorizationCode($code)
    {
        $authCode = $this->findOneBy(array('code' => $code));
        if ($authCode && $authCode->getExpires()->getTimestamp() >= time()) {
            $authCode = $authCode->toArray();
            if (is_object($authCode['client'])) {
                $authCode['client_id'] = $authCode['client']->getClientIdentifier();
            }
            if (is_object($authCode['user'])) {
                $authCode['user_id'] = $authCode['user']->getId();
            }
            $authCode['expires'] = $authCode['expires']->getTimestamp();
        }
        return $authCode;
    }

    public function setAuthorizationCode($code, $clientIdentifier, $userEmail, $redirectUri, $expires, $scope = null, $id_token = null)
    {
        $client = $this->_em->getRepository('Eccube\Entity\OAuth2\Client')
            ->findOneBy(
                array('client_identifier' => $clientIdentifier)
            );
        $user = $this->_em->getRepository('Eccube\Entity\OAuth2\User')
            ->findOneBy(
                array('email' => $userEmail)
            );
        $AuthorizationCode = $this->_em->getRepository('Eccube\Entity\OAuth2\AuthorizationCode')
            ->findOneBy(
                array('code' => $code)
            );

        if ($AuthorizationCode) {
            $AuthorizationCode->setPropertiesFromArray(
                array(
                    'code'           => $code,
                    'client'         => $client,
                    'user'           => $user,
                    'redirect_uri'   => $redirectUri,
                    'expires'        => (new \DateTime())->setTimestamp($expires),
                    'scope'          => $scope,
                    'id_token'       => $id_token,
                )
            );
        } else {
            $AuthorizationCode = new \Eccube\Entity\OAuth2\AuthorizationCode();
            $AuthorizationCode->setPropertiesFromArray(
                array(
                    'code'           => $code,
                    'client'         => $client,
                    'user'           => $user,
                    'redirect_uri'   => $redirectUri,
                    'expires'        => (new \DateTime())->setTimestamp($expires),
                    'scope'          => $scope,
                    'id_token'       => $id_token,
                )
            );
            $this->_em->persist($AuthorizationCode);
        }

        $this->_em->flush($AuthorizationCode);
    }

    public function expireAuthorizationCode($code)
    {
        $authCode = $this->findOneBy(array('code' => $code));
        if ($authCode->getExpires()->getTimestamp() <= time()) {
            $this->_em->remove($authCode);
            $this->_em->flush();
        }
    }
}
